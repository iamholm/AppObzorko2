import re
from datetime import datetime

class ColumnIFormatter:
    """
    Класс для форматирования данных в столбце I (информация о судах)
    """
    
    def __init__(self):
        # Паттерны для поиска дат в разных форматах
        self.date_patterns = [
            r'(\d{1,2})\.(\d{1,2})\.(\d{2,4})',  # ДД.ММ.ГГГГ
            r'(\d{1,2})/(\d{1,2})/(\d{2,4})',    # ДД/ММ/ГГГГ
            r'(\d{1,2})-(\d{1,2})-(\d{2,4})',    # ДД-ММ-ГГГГ
            r'(\d{1,2})\s+(\d{1,2})\s+(\d{2,4})'  # ДД ММ ГГГГ
        ]
        
        # Паттерны для поиска судов
        self.court_patterns = [
            r'([А-Яа-я\s]+суд)',
            r'([А-Яа-я\s]+районный\s+суд)',
            r'([А-Яа-я\s]+городской\s+суд)',
            r'([А-Яа-я\s]+областной\s+суд)',
            r'([А-Яа-я\s]+краевой\s+суд)',
            r'([А-Яа-я\s]+республиканский\s+суд)'
        ]
    
    def _remove_unwanted_symbols(self, text):
        """
        Удаляет нежелательные символы из текста, оставляя только разрешенные
        
        Args:
            text (str): Исходный текст
            
        Returns:
            str: Текст с удаленными нежелательными символами
        """
        # Список разрешенных символов
        allowed_symbols = r'[а-яА-ЯёЁa-zA-Z0-9\s\.\,\/\:\;\(\)\"\'\«\»№\–\%]'
        
        # Сначала заменяем известные нежелательные символы на пробел
        unwanted_chars = [
            '•', '·', '○', '●', '◆', '■', '□', '▲', '△', '▼', '▽', '→', '←', '↑', '↓',
            '★', '☆', '✧', '✦', '✯', '✰', '✱', '✲', '✳', '✴', '✵', '✶', '✷', '✸', '✹',
            '⚫', '⚪', '⚬', '⚭', '⚮', '⚯', '⚰', '⚱', '⚲', '⚳', '⚴', '⚵', '⚶', '⚷', '⚸',
            '⚹', '⚺', '⚻', '⚼', '⚽', '⚾', '⚿', '⛀', '⛁', '⛂', '⛃', '⛄', '⛅', '⛆', '⛇',
            '❖', '❥', '❦', '❧', '❨', '❩', '❪', '❫', '❬', '❭', '❮', '❯', '❰', '❱', '❲',
            '❳', '❴', '❵', '❶', '❷', '❸', '❹', '❺', '❻', '❼', '❽', '❾', '❿', '➀', '➁',
            '➂', '➃', '➄', '➅', '➆', '➇', '➈', '➉', '➊', '➋', '➌', '➍', '➎', '➏', '➐',
            '➑', '➒', '➓', '➔', '➘', '➙', '➚', '➛', '➜', '➝', '➞', '➟', '➠', '➡', '➢',
            '➣', '➤', '➥', '➦', '➧', '➨', '➩', '➪', '➫', '➬', '➭', '➮', '➯', '➱', '➲',
            '➳', '➴', '➵', '➶', '➷', '➸', '➹', '➺', '➻', '➼', '➽', '➾', '➔', '➘', '➙',
            '➚', '➛', '➜', '➝', '➞', '➟', '➠', '➡', '➢', '➣', '➤', '➥', '➦', '➧', '➨',
            '➩', '➪', '➫', '➬', '➭', '➮', '➯', '➱', '➲', '➳', '➴', '➵', '➶', '➷', '➸',
            '➹', '➺', '➻', '➼', '➽', '➾', '➔', '➘', '➙', '➚', '➛', '➜', '➝', '➞', '➟',
            '➠', '➡', '➢', '➣', '➤', '➥', '➦', '➧', '➨', '➩', '➪', '➫', '➬', '➭', '➮',
            '➯', '➱', '➲', '➳', '➴', '➵', '➶', '➷', '➸', '➹', '➺', '➻', '➼', '➽', '➾'
        ]
        
        for char in unwanted_chars:
            text = text.replace(char, ' ')
        
        # Затем удаляем все остальные нежелательные символы
        text = re.sub(f'[^{allowed_symbols}]', ' ', text)
        
        # Удаляем множественные пробелы
        text = re.sub(r'\s+', ' ', text)
        
        return text.strip()

    def _normalize_additional_rules(self, text):
        """
        Применяет дополнительные правила форматирования
        
        Args:
            text (str): Исходный текст
            
        Returns:
            str: Текст с примененными правилами форматирования
        """
        # Паттерны для поиска и замены
        patterns = [
            # Нормализация "ст."
            (r'ст:', 'ст.'),
            (r'ст\s', 'ст. '),
            
            # Добавление пробела перед "ч."
            (r'([^\s])ч\.', r'\1 ч.'),
            
            # Нормализация "№"
            (r'([^\s])№', r'\1 №'),
            (r'№([^\s])', r'№ \1'),
            
            # Двойные запятые
            (r',\s*,', ','),
            
            # Нормализация "год/года"
            (r'Года', 'года'),
            (r'Год', 'год'),
            
            # Нормализация написания частей статей без точки
            (r'ч([1-6])', r'ч. \1'),
            # Нормализация написания частей статей с пробелом без точки
            (r'ч\s+([1-6])', r'ч. \1'),
            
            # Добавление пробелов до и после "ч. N"
            (r'([^\s])ч\.\s*1', r'\1 ч. 1'),
            (r'ч\.\s*1([^\s])', r'ч. 1 \1'),
            (r'([^\s])ч\.\s*2', r'\1 ч. 2'),
            (r'ч\.\s*2([^\s])', r'ч. 2 \1'),
            (r'([^\s])ч\.\s*3', r'\1 ч. 3'),
            (r'ч\.\s*3([^\s])', r'ч. 3 \1'),
            (r'([^\s])ч\.\s*4', r'\1 ч. 4'),
            (r'ч\.\s*4([^\s])', r'ч. 4 \1'),
            (r'([^\s])ч\.\s*5', r'\1 ч. 5'),
            (r'ч\.\s*5([^\s])', r'ч. 5 \1'),
            (r'([^\s])ч\.\s*6', r'\1 ч. 6'),
            (r'ч\.\s*6([^\s])', r'ч. 6 \1'),
            
            # Добавление точки после "п" в конструкциях "ч. N п"
            (r'ч\.\s*1\s+п(?!\.)', r'ч. 1 п.'),
            (r'ч\.\s*2\s+п(?!\.)', r'ч. 2 п.'),
            (r'ч\.\s*3\s+п(?!\.)', r'ч. 3 п.'),
            (r'ч\.\s*4\s+п(?!\.)', r'ч. 4 п.'),
            (r'ч\.\s*5\s+п(?!\.)', r'ч. 5 п.'),
            (r'ч\.\s*6\s+п(?!\.)', r'ч. 6 п.')
        ]
        
        # Применяем все паттерны
        for pattern, replacement in patterns:
            text = re.sub(pattern, replacement, text)
        
        return text

    def _normalize_court_abbreviation(self, text):
        """
        Заменяет выражение "районным судом" на "р/с"
        
        Args:
            text (str): Исходный текст
            
        Returns:
            str: Текст с замененным выражением
        """
        return re.sub(r'районным\s+судом', 'р/с', text)

    def format_text(self, text):
        """
        Форматирует текст в столбце I
        
        Args:
            text (str): Исходный текст
            
        Returns:
            str: Отформатированный текст
        """
        if not text:
            return text
            
        # Удаляем нежелательные символы
        text = self._remove_unwanted_symbols(text)
            
        # Удаляем лишние пробелы
        text = re.sub(r'\s+', ' ', text).strip()
        
        # Удаляем пробелы в датах (например, "30. 01. 2025" -> "30.01.2025")
        text = re.sub(r'(\d+)\.\s+(\d+)\.\s+(\d+)', r'\1.\2.\3', text)
        
        # Нормализуем даты в разных форматах
        text = self._normalize_dates(text)
        
        # Нормализуем написание "г. СПб"
        text = self._normalize_spb(text)
        
        # Нормализуем написание специальных терминов
        text = self._normalize_special_terms(text)
        
        # Применяем дополнительные правила форматирования
        text = self._normalize_additional_rules(text)
        
        # Форматируем названия судов
        text = self._format_court_names(text)
        
        # Добавляем пробелы после знаков препинания
        text = re.sub(r'([.,;:])(?!\s)', r'\1 ', text)
        
        # Убираем пробелы перед знаками препинания
        text = re.sub(r'\s+([.,;:])', r'\1', text)
        
        # Добавляем точку в конце, если её нет
        if text and not text.endswith(('.', '!', '?')):
            text += '.'
        
        # Первая буква предложения должна быть заглавной
        if text:
            text = text[0].upper() + text[1:]
            
        # В самом конце проверяем и исправляем двойные точки
        text = re.sub(r'\.\s*\.', '.', text)
        text = re.sub(r'\.\s+\.', '.', text)
        text = re.sub(r'\.\.', '.', text)
        
        # Заменяем "; ." на "."
        text = re.sub(r';\s*\.', '.', text)
        
        # В самом конце заменяем "СПбским" на "СПб"
        text = re.sub(r'СПбским', 'СПб', text, flags=re.IGNORECASE)
        
        # Убираем лишнее "г. СПб" в конструкции "г. СПб г/с г. СПб"
        text = re.sub(r'г\.\s*СПб\s+г/с\s+г\.\s*СПб', 'г/с г. СПб', text)
        
        return text
    
    def _normalize_dates(self, text):
        """
        Нормализует все даты в тексте к формату ДД.ММ.ГГГГ
        """
        for pattern in self.date_patterns:
            text = re.sub(pattern, self._format_date, text)
        return text
    
    def _format_date(self, match):
        """
        Форматирует найденную дату в формат ДД.ММ.ГГГГ
        """
        day, month, year = match.groups()
        
        # Добавляем ведущие нули
        day = day.zfill(2)
        month = month.zfill(2)
        
        # Обрабатываем год
        if len(year) == 2:
            year = '20' + year if int(year) < 50 else '19' + year
        
        return f"{day}.{month}.{year}"
    
    def _format_court_names(self, text):
        """
        Форматирует названия судов
        """
        for pattern in self.court_patterns:
            text = re.sub(pattern, self._capitalize_court_name, text)
        return text
    
    def _capitalize_court_name(self, match):
        """
        Возвращает название суда без изменения регистра
        """
        return match.group(1)
    
    def _normalize_spb(self, text):
        """
        Нормализует написание "г. СПб" в тексте
        
        Args:
            text (str): Исходный текст
            
        Returns:
            str: Текст с нормализованным написанием "г. СПб"
        """
        # Заменяем "СПБ" на "СПб"
        text = re.sub(r'СПБ', 'СПб', text)
        
        # Заменяем "Санкт-Петербург" и "Санкт-Петербурга" на "СПб"
        text = re.sub(r'Санкт-Петербурга', 'СПб', text)
        text = re.sub(r'Санкт-Петербург', 'СПб', text)
        
        # Заменяем "Ленинградская область" и "Ленинградской области" на "ЛО"
        text = re.sub(r'Ленинградской\s+области', 'ЛО', text)
        text = re.sub(r'Ленинградская\s+область', 'ЛО', text)
        
        # Паттерны для поиска различных вариантов написания
        patterns = [
            (r'р/с\s*г\.\s*СПб', 'р/с г. СПб'),  # р/с г.СПб -> р/с г. СПб
            (r'р/с\s*г\s*СПб', 'р/с г. СПб'),  # р/с гСПб -> р/с г. СПб
            (r'г\.\s*СПб', 'г. СПб'),  # г.СПб -> г. СПб
            (r'г\s*СПб', 'г. СПб'),  # гСПб -> г. СПб
            (r'(?<!г\.\s)СПб', 'г. СПб'),  # СПб -> г. СПб (если перед ним нет "г.")
        ]
        
        # Применяем все паттерны
        for pattern, replacement in patterns:
            text = re.sub(pattern, replacement, text)
        
        # Добавляем пробел перед "г. СПб", если его нет
        text = re.sub(r'([^\s])г\.\s*СПб', r'\1 г. СПб', text)
        
        return text
    
    def _normalize_special_terms(self, text):
        """
        Нормализует написание специальных терминов (р/с, р/с, УК РФ)
        
        Args:
            text (str): Исходный текст
            
        Returns:
            str: Текст с нормализованным написанием специальных терминов
        """
        # Паттерны для поиска и замены
        patterns = [
            # р/с
            (r'([^\s])р/с', r'\1 р/с'),  # Добавляем пробел перед р/с
            (r'р/с([^\s])', r'р/с \1'),  # Добавляем пробел после р/с
            
            # р/с
            (r'([^\s])р/с', r'\1 р/с'),  # Добавляем пробел перед р/с
            (r'р/с([^\s])', r'р/с \1'),  # Добавляем пробел после р/с
            
            # УК РФ
            (r'([^\s])УК\s*РФ', r'\1 УК РФ'),  # Добавляем пробел перед УК РФ
            (r'УК\s*РФ([^\s])', r'УК РФ \1'),  # Добавляем пробел после УК РФ
            (r'УК\s+РФ', r'УК РФ'),  # Нормализуем пробел между УК и РФ
        ]
        
        # Применяем все паттерны
        for pattern, replacement in patterns:
            text = re.sub(pattern, replacement, text)
        
        return text
    
    def process_excel_column(self, sheet, column_index=9):
        """
        Обрабатывает все ячейки в указанном столбце
        
        Args:
            sheet: Лист Excel
            column_index (int): Индекс столбца (по умолчанию 9 для столбца I)
            
        Returns:
            dict: Статистика обработки
        """
        stats = {
            'cells_processed': 0,
            'dates_normalized': 0,
            'courts_formatted': 0
        }
        
        for row in range(1, sheet.max_row + 1):
            cell = sheet.cell(row=row, column=column_index)
            if cell.value:
                original_text = str(cell.value)
                formatted_text = self.format_text(original_text)
                
                if formatted_text != original_text:
                    cell.value = formatted_text
                    stats['cells_processed'] += 1
                    
                    # Подсчитываем изменения
                    if re.search(r'\d{1,2}[./-]\d{1,2}[./-]\d{2,4}', original_text):
                        stats['dates_normalized'] += 1
                    if any(re.search(pattern, original_text) for pattern in self.court_patterns):
                        stats['courts_formatted'] += 1
        
        return stats 